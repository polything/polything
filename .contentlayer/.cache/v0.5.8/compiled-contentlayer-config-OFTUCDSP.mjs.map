{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer2/source-files'\n\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: 'posts/**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    slug: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    updated: { type: 'date', required: false },\n    categories: { type: 'list', of: { type: 'string' }, required: false },\n    tags: { type: 'list', of: { type: 'string' }, required: false },\n    featured: { type: 'boolean', required: false },\n    hero: {\n      type: 'nested',\n      of: {\n        title: { type: 'string', required: false },\n        subtitle: { type: 'string', required: false },\n        image: { type: 'string', required: false },\n        video: { type: 'string', required: false },\n        text_color: { type: 'string', required: false },\n        background_color: { type: 'string', required: false },\n      },\n      required: false,\n    },\n    seo: {\n      type: 'nested',\n      of: {\n        title: { type: 'string', required: false },\n        description: { type: 'string', required: false },\n        canonical: { type: 'string', required: false },\n        schema: {\n          type: 'nested',\n          of: {\n            type: { type: 'string', required: false },\n            image: { type: 'string', required: false },\n            author: { type: 'string', required: false },\n            publishDate: { type: 'string', required: false },\n            modifiedDate: { type: 'string', required: false },\n            breadcrumbs: { type: 'list', of: { type: 'json' }, required: false },\n          },\n          required: false,\n        },\n      },\n      required: false,\n    },\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (doc) => `/blog/${doc.slug}`,\n    },\n  },\n}))\n\nexport const Project = defineDocumentType(() => ({\n  name: 'Project',\n  filePathPattern: 'projects/**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    slug: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    updated: { type: 'date', required: false },\n    categories: { type: 'list', of: { type: 'string' }, required: false },\n    tags: { type: 'list', of: { type: 'string' }, required: false },\n    hero: {\n      type: 'nested',\n      of: {\n        title: { type: 'string', required: false },\n        subtitle: { type: 'string', required: false },\n        image: { type: 'string', required: false },\n        video: { type: 'string', required: false },\n        text_color: { type: 'string', required: false },\n        background_color: { type: 'string', required: false },\n      },\n      required: false,\n    },\n    links: {\n      type: 'nested',\n      of: {\n        url: { type: 'string', required: false },\n        image: { type: 'string', required: false },\n        video: { type: 'string', required: false },\n      },\n      required: false,\n    },\n    seo: {\n      type: 'nested',\n      of: {\n        title: { type: 'string', required: false },\n        description: { type: 'string', required: false },\n        canonical: { type: 'string', required: false },\n        schema: {\n          type: 'nested',\n          of: {\n            type: { type: 'string', required: false },\n            image: { type: 'string', required: false },\n            author: { type: 'string', required: false },\n            publishDate: { type: 'string', required: false },\n            modifiedDate: { type: 'string', required: false },\n            breadcrumbs: { type: 'list', of: { type: 'json' }, required: false },\n          },\n          required: false,\n        },\n      },\n      required: false,\n    },\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (doc) => `/work/${doc.slug}`,\n    },\n  },\n}))\n\nexport const Page = defineDocumentType(() => ({\n  name: 'Page',\n  filePathPattern: 'pages/**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    slug: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    updated: { type: 'date', required: false },\n    categories: { type: 'list', of: { type: 'string' }, required: false },\n    tags: { type: 'list', of: { type: 'string' }, required: false },\n    hero: {\n      type: 'nested',\n      of: {\n        title: { type: 'string', required: false },\n        subtitle: { type: 'string', required: false },\n        image: { type: 'string', required: false },\n        video: { type: 'string', required: false },\n        text_color: { type: 'string', required: false },\n        background_color: { type: 'string', required: false },\n      },\n      required: false,\n    },\n    seo: {\n      type: 'nested',\n      of: {\n        title: { type: 'string', required: false },\n        description: { type: 'string', required: false },\n        canonical: { type: 'string', required: false },\n        schema: {\n          type: 'nested',\n          of: {\n            type: { type: 'string', required: false },\n            image: { type: 'string', required: false },\n            author: { type: 'string', required: false },\n            publishDate: { type: 'string', required: false },\n            modifiedDate: { type: 'string', required: false },\n            breadcrumbs: { type: 'list', of: { type: 'json' }, required: false },\n          },\n          required: false,\n        },\n      },\n      required: false,\n    },\n  },\n  computedFields: {\n    url: {\n      type: 'string',\n      resolve: (doc) => `/${doc.slug}`,\n    },\n  },\n}))\n\nexport default makeSource({\n  contentDirPath: './content',\n  documentTypes: [Post, Project, Page],\n})\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAExC,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACvC,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACrC,SAAS,EAAE,MAAM,QAAQ,UAAU,MAAM;AAAA,IACzC,YAAY,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,MAAM;AAAA,IACpE,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,MAAM;AAAA,IAC9D,UAAU,EAAE,MAAM,WAAW,UAAU,MAAM;AAAA,IAC7C,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,IAAI;AAAA,QACF,OAAO,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QACzC,UAAU,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QAC5C,OAAO,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QACzC,OAAO,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QACzC,YAAY,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QAC9C,kBAAkB,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,MACtD;AAAA,MACA,UAAU;AAAA,IACZ;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,MACN,IAAI;AAAA,QACF,OAAO,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QACzC,aAAa,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QAC/C,WAAW,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QAC7C,QAAQ;AAAA,UACN,MAAM;AAAA,UACN,IAAI;AAAA,YACF,MAAM,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,YACxC,OAAO,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,YACzC,QAAQ,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,YAC1C,aAAa,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,YAC/C,cAAc,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,YAChD,aAAa,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,OAAO,GAAG,UAAU,MAAM;AAAA,UACrE;AAAA,UACA,UAAU;AAAA,QACZ;AAAA,MACF;AAAA,MACA,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,SAAS,IAAI,IAAI;AAAA,IACrC;AAAA,EACF;AACF,EAAE;AAEK,IAAM,UAAU,mBAAmB,OAAO;AAAA,EAC/C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACvC,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACrC,SAAS,EAAE,MAAM,QAAQ,UAAU,MAAM;AAAA,IACzC,YAAY,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,MAAM;AAAA,IACpE,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,MAAM;AAAA,IAC9D,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,IAAI;AAAA,QACF,OAAO,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QACzC,UAAU,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QAC5C,OAAO,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QACzC,OAAO,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QACzC,YAAY,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QAC9C,kBAAkB,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,MACtD;AAAA,MACA,UAAU;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,IAAI;AAAA,QACF,KAAK,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QACvC,OAAO,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QACzC,OAAO,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,MAC3C;AAAA,MACA,UAAU;AAAA,IACZ;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,MACN,IAAI;AAAA,QACF,OAAO,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QACzC,aAAa,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QAC/C,WAAW,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QAC7C,QAAQ;AAAA,UACN,MAAM;AAAA,UACN,IAAI;AAAA,YACF,MAAM,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,YACxC,OAAO,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,YACzC,QAAQ,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,YAC1C,aAAa,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,YAC/C,cAAc,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,YAChD,aAAa,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,OAAO,GAAG,UAAU,MAAM;AAAA,UACrE;AAAA,UACA,UAAU;AAAA,QACZ;AAAA,MACF;AAAA,MACA,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,SAAS,IAAI,IAAI;AAAA,IACrC;AAAA,EACF;AACF,EAAE;AAEK,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACvC,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACrC,SAAS,EAAE,MAAM,QAAQ,UAAU,MAAM;AAAA,IACzC,YAAY,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,MAAM;AAAA,IACpE,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,MAAM;AAAA,IAC9D,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,IAAI;AAAA,QACF,OAAO,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QACzC,UAAU,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QAC5C,OAAO,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QACzC,OAAO,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QACzC,YAAY,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QAC9C,kBAAkB,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,MACtD;AAAA,MACA,UAAU;AAAA,IACZ;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,MACN,IAAI;AAAA,QACF,OAAO,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QACzC,aAAa,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QAC/C,WAAW,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,QAC7C,QAAQ;AAAA,UACN,MAAM;AAAA,UACN,IAAI;AAAA,YACF,MAAM,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,YACxC,OAAO,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,YACzC,QAAQ,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,YAC1C,aAAa,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,YAC/C,cAAc,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,YAChD,aAAa,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,OAAO,GAAG,UAAU,MAAM;AAAA,UACrE;AAAA,UACA,UAAU;AAAA,QACZ;AAAA,MACF;AAAA,MACA,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,IAAI,IAAI;AAAA,IAChC;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,MAAM,SAAS,IAAI;AACrC,CAAC;",
  "names": []
}
